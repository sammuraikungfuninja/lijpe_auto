
bin\Debug\basis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000502  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  000005b6  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000005b9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000b8  00000000  00000000  00000610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000e4f  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000cd9  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000649  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001f4  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000057c  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000118  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_21>
  58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_22>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_23>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a2 30       	cpi	r26, 0x02	; 2

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 16 02 	call	0x42c	; 0x42c <main>
 108:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <__vector_23>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "h_bridge.h"

ISR(TIMER0_OVF_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	0b b6       	in	r0, 0x3b	; 59
 11c:	0f 92       	push	r0
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62

00000130 <.Loc.1>:
	if (OCR0A == 0 && OCR0B == 0)
 130:	87 e4       	ldi	r24, 0x47	; 71
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z

00000138 <.Loc.2>:
 138:	88 23       	and	r24, r24
 13a:	c9 f4       	brne	.+50     	; 0x16e <.L2>

0000013c <.Loc.3>:
 13c:	88 e4       	ldi	r24, 0x48	; 72
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z

00000144 <.Loc.4>:
 144:	88 23       	and	r24, r24
 146:	99 f4       	brne	.+38     	; 0x16e <.L2>

00000148 <.Loc.5>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z

00000150 <.Loc.6>:
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	91 e0       	ldi	r25, 0x01	; 1

00000154 <.Loc.7>:
 154:	2f 7b       	andi	r18, 0xBF	; 191
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18

0000015a <.Loc.8>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	20 81       	ld	r18, Z

00000162 <.Loc.9>:
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	90 e0       	ldi	r25, 0x00	; 0

00000166 <.Loc.10>:
 166:	2f 7d       	andi	r18, 0xDF	; 223
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18

0000016c <.Loc.11>:
	else if (OCR0B != 0)
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
		PORT_LPWM |= (1<<PIN_LPWM);
	}
}
 16c:	31 c0       	rjmp	.+98     	; 0x1d0 <.L5>

0000016e <.L2>:
	else if (OCR0A != 0)
 16e:	87 e4       	ldi	r24, 0x47	; 71
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z

00000176 <.Loc.13>:
 176:	88 23       	and	r24, r24
 178:	99 f0       	breq	.+38     	; 0x1a0 <.L4>

0000017a <.Loc.14>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 17a:	81 e3       	ldi	r24, 0x31	; 49
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	20 81       	ld	r18, Z

00000182 <.Loc.15>:
 182:	81 e3       	ldi	r24, 0x31	; 49
 184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.16>:
 186:	2f 7d       	andi	r18, 0xDF	; 223
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18

0000018c <.Loc.17>:
		PORT_RPWM |= (1<<PIN_RPWM);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	20 81       	ld	r18, Z
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	91 e0       	ldi	r25, 0x01	; 1

00000198 <.Loc.18>:
 198:	20 64       	ori	r18, 0x40	; 64
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18

0000019e <.Loc.19>:
}
 19e:	18 c0       	rjmp	.+48     	; 0x1d0 <.L5>

000001a0 <.L4>:
	else if (OCR0B != 0)
 1a0:	88 e4       	ldi	r24, 0x48	; 72
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z

000001a8 <.Loc.21>:
 1a8:	88 23       	and	r24, r24
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <.L5>

000001ac <.Loc.22>:
		PORT_RPWM &= ~(1<<PIN_RPWM);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 81       	ld	r18, Z

000001b4 <.Loc.23>:
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	91 e0       	ldi	r25, 0x01	; 1

000001b8 <.Loc.24>:
 1b8:	2f 7b       	andi	r18, 0xBF	; 191
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18

000001be <.Loc.25>:
		PORT_LPWM |= (1<<PIN_LPWM);
 1be:	81 e3       	ldi	r24, 0x31	; 49
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 81       	ld	r18, Z
 1c6:	81 e3       	ldi	r24, 0x31	; 49
 1c8:	90 e0       	ldi	r25, 0x00	; 0

000001ca <.Loc.26>:
 1ca:	20 62       	ori	r18, 0x20	; 32
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18

000001d0 <.L5>:
}
 1d0:	00 00       	nop
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	0b b6       	in	r0, 0x3b	; 59
 1fa:	0f 92       	push	r0
 1fc:	2f 93       	push	r18
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62

0000020e <.Loc.29>:
	if (OCR0A != 255)
 20e:	87 e4       	ldi	r24, 0x47	; 71
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z

00000216 <.Loc.30>:
 216:	8f 3f       	cpi	r24, 0xFF	; 255
 218:	49 f0       	breq	.+18     	; 0x22c <.L8>

0000021a <.Loc.31>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	fc 01       	movw	r30, r24
 220:	20 81       	ld	r18, Z

00000222 <.Loc.32>:
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	91 e0       	ldi	r25, 0x01	; 1

00000226 <.Loc.33>:
 226:	2f 7b       	andi	r18, 0xBF	; 191
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18

0000022c <.L8>:
	}
}
 22c:	00 00       	nop
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	2f 93       	push	r18
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62

0000026a <.Loc.36>:
	if (OCR0B != 255)
 26a:	88 e4       	ldi	r24, 0x48	; 72
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	80 81       	ld	r24, Z

00000272 <.Loc.37>:
 272:	8f 3f       	cpi	r24, 0xFF	; 255
 274:	49 f0       	breq	.+18     	; 0x288 <.L11>

00000276 <.Loc.38>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 276:	81 e3       	ldi	r24, 0x31	; 49
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	20 81       	ld	r18, Z

0000027e <.Loc.39>:
 27e:	81 e3       	ldi	r24, 0x31	; 49
 280:	90 e0       	ldi	r25, 0x00	; 0

00000282 <.Loc.40>:
 282:	2f 7d       	andi	r18, 0xDF	; 223
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18

00000288 <.L11>:
	}
}
 288:	00 00       	nop
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <init_h_bridge>:

void init_h_bridge(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62

000002ae <.Loc.43>:
	// Config pins as output
	DDR_RPWM |= (1<<PIN_RPWM);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 81       	ld	r18, Z
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	91 e0       	ldi	r25, 0x01	; 1

000002ba <.Loc.44>:
 2ba:	20 64       	ori	r18, 0x40	; 64
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18

000002c0 <.Loc.45>:
	DDR_LPWM |= (1<<PIN_LPWM);
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 81       	ld	r18, Z
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	90 e0       	ldi	r25, 0x00	; 0

000002cc <.Loc.46>:
 2cc:	20 62       	ori	r18, 0x20	; 32
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18

000002d2 <.Loc.47>:

	// Output low
	PORT_RPWM &= ~(1<<PIN_RPWM);
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 81       	ld	r18, Z

000002da <.Loc.48>:
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	91 e0       	ldi	r25, 0x01	; 1

000002de <.Loc.49>:
 2de:	2f 7b       	andi	r18, 0xBF	; 191
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18

000002e4 <.Loc.50>:
	PORT_LPWM &= ~(1<<PIN_LPWM);
 2e4:	81 e3       	ldi	r24, 0x31	; 49
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 81       	ld	r18, Z

000002ec <.Loc.51>:
 2ec:	81 e3       	ldi	r24, 0x31	; 49
 2ee:	90 e0       	ldi	r25, 0x00	; 0

000002f0 <.Loc.52>:
 2f0:	2f 7d       	andi	r18, 0xDF	; 223
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18

000002f6 <.Loc.53>:

	// Use mode 0, clkdiv = 64
	TCCR0A = 0;
 2f6:	84 e4       	ldi	r24, 0x44	; 68
 2f8:	90 e0       	ldi	r25, 0x00	; 0

000002fa <.Loc.54>:
 2fa:	fc 01       	movw	r30, r24
 2fc:	10 82       	st	Z, r1

000002fe <.Loc.55>:
	TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
 2fe:	85 e4       	ldi	r24, 0x45	; 69
 300:	90 e0       	ldi	r25, 0x00	; 0

00000302 <.Loc.56>:
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18

00000308 <.Loc.57>:

	// Disable PWM output
	OCR0A = 0;
 308:	87 e4       	ldi	r24, 0x47	; 71
 30a:	90 e0       	ldi	r25, 0x00	; 0

0000030c <.Loc.58>:
 30c:	fc 01       	movw	r30, r24
 30e:	10 82       	st	Z, r1

00000310 <.Loc.59>:
	OCR0B = 0;
 310:	88 e4       	ldi	r24, 0x48	; 72
 312:	90 e0       	ldi	r25, 0x00	; 0

00000314 <.Loc.60>:
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1

00000318 <.Loc.61>:

	// Interrupts on OCA, OCB and OVF
	TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
 318:	8e e6       	ldi	r24, 0x6E	; 110
 31a:	90 e0       	ldi	r25, 0x00	; 0

0000031c <.Loc.62>:
 31c:	27 e0       	ldi	r18, 0x07	; 7
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18

00000322 <.Loc.63>:

	sei();
 322:	78 94       	sei

00000324 <.Loc.64>:
}
 324:	00 00       	nop
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <h_bridge_set_percentage>:

void h_bridge_set_percentage(signed char percentage)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	0f 92       	push	r0
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	89 83       	std	Y+1, r24	; 0x01

00000338 <.Loc.66>:
	if (percentage >= -100 && percentage <= 100)
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	8c 39       	cpi	r24, 0x9C	; 156
 33c:	e4 f1       	brlt	.+120    	; 0x3b6 <.L16>

0000033e <.Loc.67>:
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	84 36       	cpi	r24, 0x64	; 100
 342:	09 f0       	breq	.+2      	; 0x346 <.Loc.68>

00000344 <L0^A>:
 344:	c4 f5       	brge	.+112    	; 0x3b6 <.L16>

00000346 <.Loc.68>:
	{
		if (percentage >= 0)
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	88 23       	and	r24, r24
 34a:	dc f0       	brlt	.+54     	; 0x382 <.L15>

0000034c <.Loc.69>:
		{
			// Disable LPWM, calculate RPWM
			OCR0B = 0;
 34c:	88 e4       	ldi	r24, 0x48	; 72
 34e:	90 e0       	ldi	r25, 0x00	; 0

00000350 <.Loc.70>:
 350:	fc 01       	movw	r30, r24
 352:	10 82       	st	Z, r1

00000354 <.Loc.71>:
			OCR0A = (255*percentage)/100;
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	08 2e       	mov	r0, r24
 358:	00 0c       	add	r0, r0
 35a:	99 0b       	sbc	r25, r25
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	28 9f       	mul	r18, r24
 360:	a0 01       	movw	r20, r0
 362:	29 9f       	mul	r18, r25
 364:	50 0d       	add	r21, r0
 366:	11 24       	eor	r1, r1

00000368 <.Loc.72>:
 368:	24 e6       	ldi	r18, 0x64	; 100
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	ca 01       	movw	r24, r20
 36e:	b9 01       	movw	r22, r18
 370:	0e 94 57 02 	call	0x4ae	; 0x4ae <__divmodhi4>
 374:	cb 01       	movw	r24, r22
 376:	9c 01       	movw	r18, r24

00000378 <.Loc.73>:
 378:	87 e4       	ldi	r24, 0x47	; 71
 37a:	90 e0       	ldi	r25, 0x00	; 0

0000037c <.Loc.74>:
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18

00000380 <.Loc.75>:
			// Disable RPWM, calculate LPWM
			OCR0A = 0;
			OCR0B = (255*percentage)/-100;
		}
	}
}
 380:	1a c0       	rjmp	.+52     	; 0x3b6 <.L16>

00000382 <.L15>:
			OCR0A = 0;
 382:	87 e4       	ldi	r24, 0x47	; 71
 384:	90 e0       	ldi	r25, 0x00	; 0

00000386 <.Loc.77>:
 386:	fc 01       	movw	r30, r24
 388:	10 82       	st	Z, r1

0000038a <.Loc.78>:
			OCR0B = (255*percentage)/-100;
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	08 2e       	mov	r0, r24
 38e:	00 0c       	add	r0, r0
 390:	99 0b       	sbc	r25, r25
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	28 9f       	mul	r18, r24
 396:	a0 01       	movw	r20, r0
 398:	29 9f       	mul	r18, r25
 39a:	50 0d       	add	r21, r0
 39c:	11 24       	eor	r1, r1

0000039e <.Loc.79>:
 39e:	2c e9       	ldi	r18, 0x9C	; 156
 3a0:	3f ef       	ldi	r19, 0xFF	; 255
 3a2:	ca 01       	movw	r24, r20
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 57 02 	call	0x4ae	; 0x4ae <__divmodhi4>
 3aa:	cb 01       	movw	r24, r22
 3ac:	9c 01       	movw	r18, r24

000003ae <.Loc.80>:
 3ae:	88 e4       	ldi	r24, 0x48	; 72
 3b0:	90 e0       	ldi	r25, 0x00	; 0

000003b2 <.Loc.81>:
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18

000003b6 <.L16>:
}
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <vroem>:
#include <avr/io.h>
#include "h_bridge.h"
#include "h_bridge.c"

void vroem()
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62

000003c8 <.Loc.84>:
    h_bridge_set_percentage(50);
 3c8:	82 e3       	ldi	r24, 0x32	; 50
 3ca:	0e 94 96 01 	call	0x32c	; 0x32c <h_bridge_set_percentage>

000003ce <.Loc.85>:
}
 3ce:	00 00       	nop
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <plantsensoraan>:

void plantsensoraan()
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62

000003de <.Loc.87>:
    //sensoren aan
}
 3de:	00 00       	nop
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <rem>:

void rem()
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62

000003ee <.Loc.89>:
    h_bridge_set_percentage(0);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 96 01 	call	0x32c	; 0x32c <h_bridge_set_percentage>

000003f4 <.Loc.90>:
}
 3f4:	00 00       	nop
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <alarm>:

void alarm()
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62

00000404 <.Loc.92>:
    //1 pinnetje aan en uit schakelen voor 2x
}
 404:	00 00       	nop
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <stuurlinks>:

void stuurlinks()
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62

00000414 <.Loc.94>:
    //servo
}
 414:	00 00       	nop
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <stuurrechts>:

void stuurrechts()
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62

00000424 <.Loc.96>:
    //servo
}
 424:	00 00       	nop
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <main>:

int state;
int main(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62

00000434 <.Loc.98>:
    init_h_bridge();
 434:	0e 94 53 01 	call	0x2a6	; 0x2a6 <init_h_bridge>

00000438 <.L31>:

    while(1)
    {
        //sensoren checken

        switch(state)
 438:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 43c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 440:	85 30       	cpi	r24, 0x05	; 5
 442:	91 05       	cpc	r25, r1
 444:	79 f1       	breq	.+94     	; 0x4a4 <.L24>
 446:	85 30       	cpi	r24, 0x05	; 5
 448:	91 05       	cpc	r25, r1
 44a:	09 f0       	breq	.+2      	; 0x44e <L0^A+0x2>

0000044c <L0^A>:
 44c:	ac f7       	brge	.-22     	; 0x438 <.L31>
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	91 05       	cpc	r25, r1
 452:	29 f1       	breq	.+74     	; 0x49e <.L26>
 454:	84 30       	cpi	r24, 0x04	; 4
 456:	91 05       	cpc	r25, r1
 458:	09 f0       	breq	.+2      	; 0x45c <L0^A+0x2>

0000045a <L0^A>:
 45a:	74 f7       	brge	.-36     	; 0x438 <.L31>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	91 05       	cpc	r25, r1
 460:	21 f1       	breq	.+72     	; 0x4aa <.L32>
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	91 05       	cpc	r25, r1
 466:	09 f0       	breq	.+2      	; 0x46a <L0^A+0x2>

00000468 <L0^A>:
 468:	3c f7       	brge	.-50     	; 0x438 <.L31>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	91 05       	cpc	r25, r1
 46e:	91 f0       	breq	.+36     	; 0x494 <.L28>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	91 05       	cpc	r25, r1
 474:	09 f0       	breq	.+2      	; 0x478 <L0^A+0x2>

00000476 <L0^A>:
 476:	04 f7       	brge	.-64     	; 0x438 <.L31>
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	21 f0       	breq	.+8      	; 0x484 <.L29>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	91 05       	cpc	r25, r1
 480:	21 f0       	breq	.+8      	; 0x48a <.L30>
 482:	da cf       	rjmp	.-76     	; 0x438 <.L31>

00000484 <.L29>:
        {
        case(0):
            rem();
 484:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <rem>

00000488 <.Loc.101>:
            break;
 488:	11 c0       	rjmp	.+34     	; 0x4ac <.L25>

0000048a <.L30>:

        case(1):
            vroem();
 48a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <vroem>

0000048e <.Loc.103>:
            plantsensoraan();
 48e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <plantsensoraan>

00000492 <.Loc.104>:
            //zij sensoren en sturen bijhouden
            break;
 492:	0c c0       	rjmp	.+24     	; 0x4ac <.L25>

00000494 <.L28>:

        case(2):
            rem();
 494:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <rem>

00000498 <.Loc.106>:
            alarm();
 498:	0e 94 fe 01 	call	0x3fc	; 0x3fc <alarm>

0000049c <.Loc.107>:
            //plant detect
            //alarm
            break;
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <.L25>

0000049e <.L26>:
            //bocht
            //plant sensoren uit
            break;

        case(4):
            stuurlinks();
 49e:	0e 94 06 02 	call	0x40c	; 0x40c <stuurlinks>

000004a2 <.Loc.109>:
            break;
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <.L25>

000004a4 <.L24>:

        case(5):
            stuurrechts();
 4a4:	0e 94 0e 02 	call	0x41c	; 0x41c <stuurrechts>

000004a8 <.Loc.111>:
            break;
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <.L25>

000004aa <.L32>:
	...

000004ac <.L25>:
        switch(state)
 4ac:	c5 cf       	rjmp	.-118    	; 0x438 <.L31>

000004ae <__divmodhi4>:
 4ae:	97 fb       	bst	r25, 7

000004b0 <.Loc.1>:
 4b0:	07 2e       	mov	r0, r23

000004b2 <.Loc.2>:
 4b2:	16 f4       	brtc	.+4      	; 0x4b8 <.L^B1>

000004b4 <.Loc.3>:
 4b4:	00 94       	com	r0

000004b6 <.Loc.4>:
 4b6:	07 d0       	rcall	.+14     	; 0x4c6 <__divmodhi4_neg1>

000004b8 <.L^B1>:
 4b8:	77 fd       	sbrc	r23, 7

000004ba <.Loc.6>:
 4ba:	09 d0       	rcall	.+18     	; 0x4ce <__divmodhi4_neg2>

000004bc <.Loc.7>:
 4bc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__udivmodhi4>

000004c0 <.Loc.8>:
 4c0:	07 fc       	sbrc	r0, 7

000004c2 <.Loc.9>:
 4c2:	05 d0       	rcall	.+10     	; 0x4ce <__divmodhi4_neg2>

000004c4 <.Loc.10>:
 4c4:	3e f4       	brtc	.+14     	; 0x4d4 <__divmodhi4_exit>

000004c6 <__divmodhi4_neg1>:
 4c6:	90 95       	com	r25

000004c8 <.Loc.12>:
 4c8:	81 95       	neg	r24

000004ca <.Loc.13>:
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255

000004cc <.Loc.14>:
 4cc:	08 95       	ret

000004ce <__divmodhi4_neg2>:
 4ce:	70 95       	com	r23

000004d0 <.Loc.16>:
 4d0:	61 95       	neg	r22

000004d2 <.Loc.17>:
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255

000004d4 <__divmodhi4_exit>:
 4d4:	08 95       	ret

000004d6 <__udivmodhi4>:
 4d6:	aa 1b       	sub	r26, r26

000004d8 <.Loc.1>:
 4d8:	bb 1b       	sub	r27, r27

000004da <.Loc.2>:
 4da:	51 e1       	ldi	r21, 0x11	; 17

000004dc <.Loc.3>:
 4dc:	07 c0       	rjmp	.+14     	; 0x4ec <__udivmodhi4_ep>

000004de <__udivmodhi4_loop>:
 4de:	aa 1f       	adc	r26, r26

000004e0 <.Loc.5>:
 4e0:	bb 1f       	adc	r27, r27

000004e2 <.Loc.6>:
 4e2:	a6 17       	cp	r26, r22

000004e4 <.Loc.7>:
 4e4:	b7 07       	cpc	r27, r23

000004e6 <.Loc.8>:
 4e6:	10 f0       	brcs	.+4      	; 0x4ec <__udivmodhi4_ep>

000004e8 <.Loc.9>:
 4e8:	a6 1b       	sub	r26, r22

000004ea <.Loc.10>:
 4ea:	b7 0b       	sbc	r27, r23

000004ec <__udivmodhi4_ep>:
 4ec:	88 1f       	adc	r24, r24

000004ee <.Loc.12>:
 4ee:	99 1f       	adc	r25, r25

000004f0 <.Loc.13>:
 4f0:	5a 95       	dec	r21

000004f2 <.Loc.14>:
 4f2:	a9 f7       	brne	.-22     	; 0x4de <__udivmodhi4_loop>

000004f4 <.Loc.15>:
 4f4:	80 95       	com	r24

000004f6 <.Loc.16>:
 4f6:	90 95       	com	r25

000004f8 <.Loc.17>:
 4f8:	bc 01       	movw	r22, r24

000004fa <.Loc.18>:
 4fa:	cd 01       	movw	r24, r26

000004fc <.Loc.19>:
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
