
bin\Debug\basis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000cae  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000d62  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000b8  00000000  00000000  00000db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000f9a  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000d93  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000008dd  00000000  00000000  00002b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000330  00000000  00000000  0000347c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000616  00000000  00000000  000037ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000016d  00000000  00000000  00003dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_17>
  48:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_18>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_20>
  54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_21>
  58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_22>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_23>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a2 30       	cpi	r26, 0x02	; 2

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <main>
 108:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <__vector_23>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "h_bridge.h"

ISR(TIMER0_OVF_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	0b b6       	in	r0, 0x3b	; 59
 11c:	0f 92       	push	r0
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62

00000130 <.Loc.1>:
	if (OCR0A == 0 && OCR0B == 0)
 130:	87 e4       	ldi	r24, 0x47	; 71
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z

00000138 <.Loc.2>:
 138:	88 23       	and	r24, r24
 13a:	c9 f4       	brne	.+50     	; 0x16e <.L2>

0000013c <.Loc.3>:
 13c:	88 e4       	ldi	r24, 0x48	; 72
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z

00000144 <.Loc.4>:
 144:	88 23       	and	r24, r24
 146:	99 f4       	brne	.+38     	; 0x16e <.L2>

00000148 <.Loc.5>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z

00000150 <.Loc.6>:
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	91 e0       	ldi	r25, 0x01	; 1

00000154 <.Loc.7>:
 154:	2f 7b       	andi	r18, 0xBF	; 191
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18

0000015a <.Loc.8>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	20 81       	ld	r18, Z

00000162 <.Loc.9>:
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	90 e0       	ldi	r25, 0x00	; 0

00000166 <.Loc.10>:
 166:	2f 7d       	andi	r18, 0xDF	; 223
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18

0000016c <.Loc.11>:
	else if (OCR0B != 0)
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
		PORT_LPWM |= (1<<PIN_LPWM);
	}
}
 16c:	31 c0       	rjmp	.+98     	; 0x1d0 <.L5>

0000016e <.L2>:
	else if (OCR0A != 0)
 16e:	87 e4       	ldi	r24, 0x47	; 71
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z

00000176 <.Loc.13>:
 176:	88 23       	and	r24, r24
 178:	99 f0       	breq	.+38     	; 0x1a0 <.L4>

0000017a <.Loc.14>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 17a:	81 e3       	ldi	r24, 0x31	; 49
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	20 81       	ld	r18, Z

00000182 <.Loc.15>:
 182:	81 e3       	ldi	r24, 0x31	; 49
 184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.16>:
 186:	2f 7d       	andi	r18, 0xDF	; 223
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18

0000018c <.Loc.17>:
		PORT_RPWM |= (1<<PIN_RPWM);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	20 81       	ld	r18, Z
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	91 e0       	ldi	r25, 0x01	; 1

00000198 <.Loc.18>:
 198:	20 64       	ori	r18, 0x40	; 64
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18

0000019e <.Loc.19>:
}
 19e:	18 c0       	rjmp	.+48     	; 0x1d0 <.L5>

000001a0 <.L4>:
	else if (OCR0B != 0)
 1a0:	88 e4       	ldi	r24, 0x48	; 72
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z

000001a8 <.Loc.21>:
 1a8:	88 23       	and	r24, r24
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <.L5>

000001ac <.Loc.22>:
		PORT_RPWM &= ~(1<<PIN_RPWM);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 81       	ld	r18, Z

000001b4 <.Loc.23>:
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	91 e0       	ldi	r25, 0x01	; 1

000001b8 <.Loc.24>:
 1b8:	2f 7b       	andi	r18, 0xBF	; 191
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18

000001be <.Loc.25>:
		PORT_LPWM |= (1<<PIN_LPWM);
 1be:	81 e3       	ldi	r24, 0x31	; 49
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 81       	ld	r18, Z
 1c6:	81 e3       	ldi	r24, 0x31	; 49
 1c8:	90 e0       	ldi	r25, 0x00	; 0

000001ca <.Loc.26>:
 1ca:	20 62       	ori	r18, 0x20	; 32
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18

000001d0 <.L5>:
}
 1d0:	00 00       	nop
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	0b b6       	in	r0, 0x3b	; 59
 1fa:	0f 92       	push	r0
 1fc:	2f 93       	push	r18
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62

0000020e <.Loc.29>:
	if (OCR0A != 255)
 20e:	87 e4       	ldi	r24, 0x47	; 71
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z

00000216 <.Loc.30>:
 216:	8f 3f       	cpi	r24, 0xFF	; 255
 218:	49 f0       	breq	.+18     	; 0x22c <.L8>

0000021a <.Loc.31>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	fc 01       	movw	r30, r24
 220:	20 81       	ld	r18, Z

00000222 <.Loc.32>:
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	91 e0       	ldi	r25, 0x01	; 1

00000226 <.Loc.33>:
 226:	2f 7b       	andi	r18, 0xBF	; 191
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18

0000022c <.L8>:
	}
}
 22c:	00 00       	nop
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	2f 93       	push	r18
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62

0000026a <.Loc.36>:
	if (OCR0B != 255)
 26a:	88 e4       	ldi	r24, 0x48	; 72
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	80 81       	ld	r24, Z

00000272 <.Loc.37>:
 272:	8f 3f       	cpi	r24, 0xFF	; 255
 274:	49 f0       	breq	.+18     	; 0x288 <.L11>

00000276 <.Loc.38>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 276:	81 e3       	ldi	r24, 0x31	; 49
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	20 81       	ld	r18, Z

0000027e <.Loc.39>:
 27e:	81 e3       	ldi	r24, 0x31	; 49
 280:	90 e0       	ldi	r25, 0x00	; 0

00000282 <.Loc.40>:
 282:	2f 7d       	andi	r18, 0xDF	; 223
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18

00000288 <.L11>:
	}
}
 288:	00 00       	nop
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <init_h_bridge>:

void init_h_bridge(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62

000002ae <.Loc.43>:
	// Config pins as output
	DDR_RPWM |= (1<<PIN_RPWM);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 81       	ld	r18, Z
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	91 e0       	ldi	r25, 0x01	; 1

000002ba <.Loc.44>:
 2ba:	20 64       	ori	r18, 0x40	; 64
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18

000002c0 <.Loc.45>:
	DDR_LPWM |= (1<<PIN_LPWM);
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 81       	ld	r18, Z
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	90 e0       	ldi	r25, 0x00	; 0

000002cc <.Loc.46>:
 2cc:	20 62       	ori	r18, 0x20	; 32
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18

000002d2 <.Loc.47>:

	// Output low
	PORT_RPWM &= ~(1<<PIN_RPWM);
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 81       	ld	r18, Z

000002da <.Loc.48>:
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	91 e0       	ldi	r25, 0x01	; 1

000002de <.Loc.49>:
 2de:	2f 7b       	andi	r18, 0xBF	; 191
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18

000002e4 <.Loc.50>:
	PORT_LPWM &= ~(1<<PIN_LPWM);
 2e4:	81 e3       	ldi	r24, 0x31	; 49
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 81       	ld	r18, Z

000002ec <.Loc.51>:
 2ec:	81 e3       	ldi	r24, 0x31	; 49
 2ee:	90 e0       	ldi	r25, 0x00	; 0

000002f0 <.Loc.52>:
 2f0:	2f 7d       	andi	r18, 0xDF	; 223
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18

000002f6 <.Loc.53>:

	// Use mode 0, clkdiv = 64
	TCCR0A = 0;
 2f6:	84 e4       	ldi	r24, 0x44	; 68
 2f8:	90 e0       	ldi	r25, 0x00	; 0

000002fa <.Loc.54>:
 2fa:	fc 01       	movw	r30, r24
 2fc:	10 82       	st	Z, r1

000002fe <.Loc.55>:
	TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
 2fe:	85 e4       	ldi	r24, 0x45	; 69
 300:	90 e0       	ldi	r25, 0x00	; 0

00000302 <.Loc.56>:
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18

00000308 <.Loc.57>:

	// Disable PWM output
	OCR0A = 0;
 308:	87 e4       	ldi	r24, 0x47	; 71
 30a:	90 e0       	ldi	r25, 0x00	; 0

0000030c <.Loc.58>:
 30c:	fc 01       	movw	r30, r24
 30e:	10 82       	st	Z, r1

00000310 <.Loc.59>:
	OCR0B = 0;
 310:	88 e4       	ldi	r24, 0x48	; 72
 312:	90 e0       	ldi	r25, 0x00	; 0

00000314 <.Loc.60>:
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1

00000318 <.Loc.61>:

	// Interrupts on OCA, OCB and OVF
	TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
 318:	8e e6       	ldi	r24, 0x6E	; 110
 31a:	90 e0       	ldi	r25, 0x00	; 0

0000031c <.Loc.62>:
 31c:	27 e0       	ldi	r18, 0x07	; 7
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18

00000322 <.Loc.63>:

	sei();
 322:	78 94       	sei

00000324 <.Loc.64>:
}
 324:	00 00       	nop
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <h_bridge_set_percentage>:

void h_bridge_set_percentage(signed char percentage)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	0f 92       	push	r0
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	89 83       	std	Y+1, r24	; 0x01

00000338 <.Loc.66>:
	if (percentage >= -100 && percentage <= 100)
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	8c 39       	cpi	r24, 0x9C	; 156
 33c:	e4 f1       	brlt	.+120    	; 0x3b6 <.L16>

0000033e <.Loc.67>:
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	84 36       	cpi	r24, 0x64	; 100
 342:	09 f0       	breq	.+2      	; 0x346 <.Loc.68>

00000344 <L0^A>:
 344:	c4 f5       	brge	.+112    	; 0x3b6 <.L16>

00000346 <.Loc.68>:
	{
		if (percentage >= 0)
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	88 23       	and	r24, r24
 34a:	dc f0       	brlt	.+54     	; 0x382 <.L15>

0000034c <.Loc.69>:
		{
			// Disable LPWM, calculate RPWM
			OCR0B = 0;
 34c:	88 e4       	ldi	r24, 0x48	; 72
 34e:	90 e0       	ldi	r25, 0x00	; 0

00000350 <.Loc.70>:
 350:	fc 01       	movw	r30, r24
 352:	10 82       	st	Z, r1

00000354 <.Loc.71>:
			OCR0A = (255*percentage)/100;
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	08 2e       	mov	r0, r24
 358:	00 0c       	add	r0, r0
 35a:	99 0b       	sbc	r25, r25
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	28 9f       	mul	r18, r24
 360:	a0 01       	movw	r20, r0
 362:	29 9f       	mul	r18, r25
 364:	50 0d       	add	r21, r0
 366:	11 24       	eor	r1, r1

00000368 <.Loc.72>:
 368:	24 e6       	ldi	r18, 0x64	; 100
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	ca 01       	movw	r24, r20
 36e:	b9 01       	movw	r22, r18
 370:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 374:	cb 01       	movw	r24, r22
 376:	9c 01       	movw	r18, r24

00000378 <.Loc.73>:
 378:	87 e4       	ldi	r24, 0x47	; 71
 37a:	90 e0       	ldi	r25, 0x00	; 0

0000037c <.Loc.74>:
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18

00000380 <.Loc.75>:
			// Disable RPWM, calculate LPWM
			OCR0A = 0;
			OCR0B = (255*percentage)/-100;
		}
	}
}
 380:	1a c0       	rjmp	.+52     	; 0x3b6 <.L16>

00000382 <.L15>:
			OCR0A = 0;
 382:	87 e4       	ldi	r24, 0x47	; 71
 384:	90 e0       	ldi	r25, 0x00	; 0

00000386 <.Loc.77>:
 386:	fc 01       	movw	r30, r24
 388:	10 82       	st	Z, r1

0000038a <.Loc.78>:
			OCR0B = (255*percentage)/-100;
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	08 2e       	mov	r0, r24
 38e:	00 0c       	add	r0, r0
 390:	99 0b       	sbc	r25, r25
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	28 9f       	mul	r18, r24
 396:	a0 01       	movw	r20, r0
 398:	29 9f       	mul	r18, r25
 39a:	50 0d       	add	r21, r0
 39c:	11 24       	eor	r1, r1

0000039e <.Loc.79>:
 39e:	2c e9       	ldi	r18, 0x9C	; 156
 3a0:	3f ef       	ldi	r19, 0xFF	; 255
 3a2:	ca 01       	movw	r24, r20
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 3aa:	cb 01       	movw	r24, r22
 3ac:	9c 01       	movw	r18, r24

000003ae <.Loc.80>:
 3ae:	88 e4       	ldi	r24, 0x48	; 72
 3b0:	90 e0       	ldi	r25, 0x00	; 0

000003b2 <.Loc.81>:
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18

000003b6 <.L16>:
}
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <__vector_20>:
#define RESET_VALUE	(65636ul-TIME_VALUE)
#define STOP_VALUE	(TIME_VALUE*0.075)
#define RANGE		(TIME_VALUE*0.025)

ISR(TIMER1_OVF_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	0b b6       	in	r0, 0x3b	; 59
 3cc:	0f 92       	push	r0
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62

000003e2 <.Loc.84>:
	TCNT1 = RESET_VALUE;
 3e2:	84 e8       	ldi	r24, 0x84	; 132
 3e4:	90 e0       	ldi	r25, 0x00	; 0

000003e6 <.Loc.85>:
 3e6:	24 e2       	ldi	r18, 0x24	; 36
 3e8:	34 e6       	ldi	r19, 0x64	; 100
 3ea:	fc 01       	movw	r30, r24
 3ec:	31 83       	std	Z+1, r19	; 0x01
 3ee:	20 83       	st	Z, r18

000003f0 <.Loc.86>:

	PORT_1 |= (1<<PIN_1);
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 81       	ld	r18, Z
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	91 e0       	ldi	r25, 0x01	; 1

000003fc <.Loc.87>:
 3fc:	20 62       	ori	r18, 0x20	; 32
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18

00000402 <.Loc.88>:
}
 402:	00 00       	nop
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0b be       	out	0x3b, r0	; 59
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	0b b6       	in	r0, 0x3b	; 59
 42e:	0f 92       	push	r0
 430:	2f 93       	push	r18
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62

00000442 <.Loc.90>:
	PORT_1 &= ~(1<<PIN_1);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	fc 01       	movw	r30, r24
 448:	20 81       	ld	r18, Z

0000044a <.Loc.91>:
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	91 e0       	ldi	r25, 0x01	; 1

0000044e <.Loc.92>:
 44e:	2f 7d       	andi	r18, 0xDF	; 223
 450:	fc 01       	movw	r30, r24
 452:	20 83       	st	Z, r18

00000454 <.Loc.93>:
}
 454:	00 00       	nop
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0b be       	out	0x3b, r0	; 59
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62

00000484 <.Loc.95>:

}
 484:	00 00       	nop
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <init_servo>:

void init_servo(void)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62

0000049c <.Loc.97>:
	// Config pins as output
	DDR_1 |= (1<<PIN_1);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 81       	ld	r18, Z
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	91 e0       	ldi	r25, 0x01	; 1

000004a8 <.Loc.98>:
 4a8:	20 62       	ori	r18, 0x20	; 32
 4aa:	fc 01       	movw	r30, r24
 4ac:	20 83       	st	Z, r18

000004ae <.Loc.99>:

	// Use mode 0, clkdiv = 8
	TCCR1A = 0;
 4ae:	80 e8       	ldi	r24, 0x80	; 128
 4b0:	90 e0       	ldi	r25, 0x00	; 0

000004b2 <.Loc.100>:
 4b2:	fc 01       	movw	r30, r24
 4b4:	10 82       	st	Z, r1

000004b6 <.Loc.101>:
	TCCR1B = (0<<CS12) | (1<<CS11) | (0<<CS10);
 4b6:	81 e8       	ldi	r24, 0x81	; 129
 4b8:	90 e0       	ldi	r25, 0x00	; 0

000004ba <.Loc.102>:
 4ba:	22 e0       	ldi	r18, 0x02	; 2
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18

000004c0 <.Loc.103>:
	// Interrupts on OCA, OCB and OVF
	TIMSK1 = (1<<OCIE1B) | (1<<OCIE1A) | (1<<TOIE1);
 4c0:	8f e6       	ldi	r24, 0x6F	; 111
 4c2:	90 e0       	ldi	r25, 0x00	; 0

000004c4 <.Loc.104>:
 4c4:	27 e0       	ldi	r18, 0x07	; 7
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18

000004ca <.Loc.105>:

	TCNT1 = RESET_VALUE;
 4ca:	84 e8       	ldi	r24, 0x84	; 132
 4cc:	90 e0       	ldi	r25, 0x00	; 0

000004ce <.Loc.106>:
 4ce:	24 e2       	ldi	r18, 0x24	; 36
 4d0:	34 e6       	ldi	r19, 0x64	; 100
 4d2:	fc 01       	movw	r30, r24
 4d4:	31 83       	std	Z+1, r19	; 0x01
 4d6:	20 83       	st	Z, r18

000004d8 <.Loc.107>:

	servo1_set_percentage(0);
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 74 02 	call	0x4e8	; 0x4e8 <servo1_set_percentage>

000004de <.Loc.108>:


	sei();
 4de:	78 94       	sei

000004e0 <.Loc.109>:
}
 4e0:	00 00       	nop
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <servo1_set_percentage>:

void servo1_set_percentage(signed char percentage)
{
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	6d 97       	sbiw	r28, 0x1d	; 29
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	89 83       	std	Y+1, r24	; 0x01

00000502 <.Loc.111>:
	if (percentage >= -100 && percentage <= 100)
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	8c 39       	cpi	r24, 0x9C	; 156
 506:	0c f4       	brge	.+2      	; 0x50a <.Loc.112>

00000508 <L0^A>:
 508:	57 c0       	rjmp	.+174    	; 0x5b8 <.L23>

0000050a <.Loc.112>:
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	84 36       	cpi	r24, 0x64	; 100
 50e:	11 f0       	breq	.+4      	; 0x514 <.Loc.113>

00000510 <L0^A>:
 510:	0c f0       	brlt	.+2      	; 0x514 <.Loc.113>

00000512 <L0^A>:
 512:	52 c0       	rjmp	.+164    	; 0x5b8 <.L23>

00000514 <.Loc.113>:
	{
		OCR1A = RESET_VALUE+STOP_VALUE+(RANGE/100*percentage);
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	28 2f       	mov	r18, r24
 518:	88 0f       	add	r24, r24
 51a:	33 0b       	sbc	r19, r19
 51c:	44 0b       	sbc	r20, r20
 51e:	55 0b       	sbc	r21, r21
 520:	2e 87       	std	Y+14, r18	; 0x0e
 522:	3f 87       	std	Y+15, r19	; 0x0f
 524:	48 8b       	std	Y+16, r20	; 0x10
 526:	59 8b       	std	Y+17, r21	; 0x11
 528:	6e 85       	ldd	r22, Y+14	; 0x0e
 52a:	7f 85       	ldd	r23, Y+15	; 0x0f
 52c:	88 89       	ldd	r24, Y+16	; 0x10
 52e:	99 89       	ldd	r25, Y+17	; 0x11
 530:	0e 94 33 05 	call	0xa66	; 0xa66 <__floatsisf>
 534:	6a 83       	std	Y+2, r22	; 0x02
 536:	7b 83       	std	Y+3, r23	; 0x03
 538:	8c 83       	std	Y+4, r24	; 0x04
 53a:	9d 83       	std	Y+5, r25	; 0x05
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e2       	ldi	r20, 0x20	; 32
 542:	51 e4       	ldi	r21, 0x41	; 65
 544:	6a 81       	ldd	r22, Y+2	; 0x02
 546:	7b 81       	ldd	r23, Y+3	; 0x03
 548:	8c 81       	ldd	r24, Y+4	; 0x04
 54a:	9d 81       	ldd	r25, Y+5	; 0x05
 54c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__mulsf3>
 550:	6a 8b       	std	Y+18, r22	; 0x12
 552:	7b 8b       	std	Y+19, r23	; 0x13
 554:	8c 8b       	std	Y+20, r24	; 0x14
 556:	9d 8b       	std	Y+21, r25	; 0x15
 558:	8a 89       	ldd	r24, Y+18	; 0x12
 55a:	9b 89       	ldd	r25, Y+19	; 0x13
 55c:	ac 89       	ldd	r26, Y+20	; 0x14
 55e:	bd 89       	ldd	r27, Y+21	; 0x15
 560:	8e 83       	std	Y+6, r24	; 0x06
 562:	9f 83       	std	Y+7, r25	; 0x07
 564:	a8 87       	std	Y+8, r26	; 0x08
 566:	b9 87       	std	Y+9, r27	; 0x09

00000568 <.Loc.114>:
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	38 eb       	ldi	r19, 0xB8	; 184
 56c:	4f ed       	ldi	r20, 0xDF	; 223
 56e:	56 e4       	ldi	r21, 0x46	; 70
 570:	6e 81       	ldd	r22, Y+6	; 0x06
 572:	7f 81       	ldd	r23, Y+7	; 0x07
 574:	88 85       	ldd	r24, Y+8	; 0x08
 576:	99 85       	ldd	r25, Y+9	; 0x09
 578:	0e 94 91 04 	call	0x922	; 0x922 <__addsf3>
 57c:	6e 8b       	std	Y+22, r22	; 0x16
 57e:	7f 8b       	std	Y+23, r23	; 0x17
 580:	88 8f       	std	Y+24, r24	; 0x18
 582:	99 8f       	std	Y+25, r25	; 0x19
 584:	2e 89       	ldd	r18, Y+22	; 0x16
 586:	3f 89       	ldd	r19, Y+23	; 0x17
 588:	48 8d       	ldd	r20, Y+24	; 0x18
 58a:	59 8d       	ldd	r21, Y+25	; 0x19
 58c:	2a 87       	std	Y+10, r18	; 0x0a
 58e:	3b 87       	std	Y+11, r19	; 0x0b
 590:	4c 87       	std	Y+12, r20	; 0x0c
 592:	5d 87       	std	Y+13, r21	; 0x0d

00000594 <.Loc.115>:
 594:	08 e8       	ldi	r16, 0x88	; 136
 596:	10 e0       	ldi	r17, 0x00	; 0

00000598 <.Loc.116>:
 598:	6a 85       	ldd	r22, Y+10	; 0x0a
 59a:	7b 85       	ldd	r23, Y+11	; 0x0b
 59c:	8c 85       	ldd	r24, Y+12	; 0x0c
 59e:	9d 85       	ldd	r25, Y+13	; 0x0d
 5a0:	0e 94 02 05 	call	0xa04	; 0xa04 <__fixunssfsi>
 5a4:	6a 8f       	std	Y+26, r22	; 0x1a
 5a6:	7b 8f       	std	Y+27, r23	; 0x1b
 5a8:	8c 8f       	std	Y+28, r24	; 0x1c
 5aa:	9d 8f       	std	Y+29, r25	; 0x1d
 5ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
 5ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
 5b0:	d8 01       	movw	r26, r16
 5b2:	11 96       	adiw	r26, 0x01	; 1
 5b4:	9c 93       	st	X, r25
 5b6:	8e 93       	st	-X, r24

000005b8 <.L23>:
	}
}
 5b8:	00 00       	nop
 5ba:	6d 96       	adiw	r28, 0x1d	; 29
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret

000005d0 <init>:
#include "servo.c"
#include <avr/interrupt.h>
#include <util/delay.h>
int state;
void init()
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62

000005d8 <.Loc.119>:
    DDRF &= ~(1<<PF0); //A0, ir links voor
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	fc 01       	movw	r30, r24
 5de:	20 81       	ld	r18, Z

000005e0 <.Loc.120>:
 5e0:	80 e3       	ldi	r24, 0x30	; 48
 5e2:	90 e0       	ldi	r25, 0x00	; 0

000005e4 <.Loc.121>:
 5e4:	2e 7f       	andi	r18, 0xFE	; 254
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18

000005ea <.Loc.122>:
    PORTF |= (1<<PF0);
 5ea:	81 e3       	ldi	r24, 0x31	; 49
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 81       	ld	r18, Z
 5f2:	81 e3       	ldi	r24, 0x31	; 49
 5f4:	90 e0       	ldi	r25, 0x00	; 0

000005f6 <.Loc.123>:
 5f6:	21 60       	ori	r18, 0x01	; 1
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18

000005fc <.Loc.124>:
    DDRF &= ~(1<<PF1); //A1, ir rechts voor
 5fc:	80 e3       	ldi	r24, 0x30	; 48
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	fc 01       	movw	r30, r24
 602:	20 81       	ld	r18, Z

00000604 <.Loc.125>:
 604:	80 e3       	ldi	r24, 0x30	; 48
 606:	90 e0       	ldi	r25, 0x00	; 0

00000608 <.Loc.126>:
 608:	2d 7f       	andi	r18, 0xFD	; 253
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18

0000060e <.Loc.127>:
    PORTF |= (1<<PF1);
 60e:	81 e3       	ldi	r24, 0x31	; 49
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	fc 01       	movw	r30, r24
 614:	20 81       	ld	r18, Z
 616:	81 e3       	ldi	r24, 0x31	; 49
 618:	90 e0       	ldi	r25, 0x00	; 0

0000061a <.Loc.128>:
 61a:	22 60       	ori	r18, 0x02	; 2
 61c:	fc 01       	movw	r30, r24
 61e:	20 83       	st	Z, r18

00000620 <.Loc.129>:
}
 620:	00 00       	nop
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <vroem>:
void vroem()
{
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	a2 97       	sbiw	r28, 0x22	; 34
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61

0000063c <.Loc.131>:
    h_bridge_set_percentage(100);
 63c:	84 e6       	ldi	r24, 0x64	; 100
 63e:	0e 94 96 01 	call	0x32c	; 0x32c <h_bridge_set_percentage>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	aa e7       	ldi	r26, 0x7A	; 122
 648:	b5 e4       	ldi	r27, 0x45	; 69
 64a:	89 83       	std	Y+1, r24	; 0x01
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	ab 83       	std	Y+3, r26	; 0x03
 650:	bc 83       	std	Y+4, r27	; 0x04

00000652 <.LBB12>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	4a e7       	ldi	r20, 0x7A	; 122
 658:	55 e4       	ldi	r21, 0x45	; 69
 65a:	69 81       	ldd	r22, Y+1	; 0x01
 65c:	7a 81       	ldd	r23, Y+2	; 0x02
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	9c 81       	ldd	r25, Y+4	; 0x04
 662:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__mulsf3>
 666:	6b 8b       	std	Y+19, r22	; 0x13
 668:	7c 8b       	std	Y+20, r23	; 0x14
 66a:	8d 8b       	std	Y+21, r24	; 0x15
 66c:	9e 8b       	std	Y+22, r25	; 0x16
 66e:	8b 89       	ldd	r24, Y+19	; 0x13
 670:	9c 89       	ldd	r25, Y+20	; 0x14
 672:	ad 89       	ldd	r26, Y+21	; 0x15
 674:	be 89       	ldd	r27, Y+22	; 0x16
 676:	8d 83       	std	Y+5, r24	; 0x05
 678:	9e 83       	std	Y+6, r25	; 0x06
 67a:	af 83       	std	Y+7, r26	; 0x07
 67c:	b8 87       	std	Y+8, r27	; 0x08

0000067e <.Loc.133>:
	if (__tmp < 1.0)
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	40 e8       	ldi	r20, 0x80	; 128
 684:	5f e3       	ldi	r21, 0x3F	; 63
 686:	6d 81       	ldd	r22, Y+5	; 0x05
 688:	7e 81       	ldd	r23, Y+6	; 0x06
 68a:	8f 81       	ldd	r24, Y+7	; 0x07
 68c:	98 85       	ldd	r25, Y+8	; 0x08
 68e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__cmpsf2>
 692:	88 23       	and	r24, r24
 694:	2c f4       	brge	.+10     	; 0x6a0 <.L36>

00000696 <.Loc.134>:
		__ticks = 1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	9a 87       	std	Y+10, r25	; 0x0a
 69c:	89 87       	std	Y+9, r24	; 0x09
 69e:	55 c0       	rjmp	.+170    	; 0x74a <.L28>

000006a0 <.L36>:
	else if (__tmp > 65535)
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	3f ef       	ldi	r19, 0xFF	; 255
 6a4:	4f e7       	ldi	r20, 0x7F	; 127
 6a6:	57 e4       	ldi	r21, 0x47	; 71
 6a8:	6d 81       	ldd	r22, Y+5	; 0x05
 6aa:	7e 81       	ldd	r23, Y+6	; 0x06
 6ac:	8f 81       	ldd	r24, Y+7	; 0x07
 6ae:	98 85       	ldd	r25, Y+8	; 0x08
 6b0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__gesf2>
 6b4:	88 23       	and	r24, r24
 6b6:	d9 f1       	breq	.+118    	; 0x72e <.L37>
 6b8:	d4 f1       	brlt	.+116    	; 0x72e <.L37>

000006ba <.Loc.136>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	40 e2       	ldi	r20, 0x20	; 32
 6c0:	51 e4       	ldi	r21, 0x41	; 65
 6c2:	69 81       	ldd	r22, Y+1	; 0x01
 6c4:	7a 81       	ldd	r23, Y+2	; 0x02
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__mulsf3>
 6ce:	6f 8b       	std	Y+23, r22	; 0x17
 6d0:	78 8f       	std	Y+24, r23	; 0x18
 6d2:	89 8f       	std	Y+25, r24	; 0x19
 6d4:	9a 8f       	std	Y+26, r25	; 0x1a
 6d6:	8f 89       	ldd	r24, Y+23	; 0x17
 6d8:	98 8d       	ldd	r25, Y+24	; 0x18
 6da:	a9 8d       	ldd	r26, Y+25	; 0x19
 6dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
 6de:	8f 87       	std	Y+15, r24	; 0x0f
 6e0:	98 8b       	std	Y+16, r25	; 0x10
 6e2:	a9 8b       	std	Y+17, r26	; 0x11
 6e4:	ba 8b       	std	Y+18, r27	; 0x12

000006e6 <.Loc.137>:
 6e6:	6f 85       	ldd	r22, Y+15	; 0x0f
 6e8:	78 89       	ldd	r23, Y+16	; 0x10
 6ea:	89 89       	ldd	r24, Y+17	; 0x11
 6ec:	9a 89       	ldd	r25, Y+18	; 0x12
 6ee:	0e 94 02 05 	call	0xa04	; 0xa04 <__fixunssfsi>
 6f2:	6b 8f       	std	Y+27, r22	; 0x1b
 6f4:	7c 8f       	std	Y+28, r23	; 0x1c
 6f6:	8d 8f       	std	Y+29, r24	; 0x1d
 6f8:	9e 8f       	std	Y+30, r25	; 0x1e
 6fa:	ab 8d       	ldd	r26, Y+27	; 0x1b
 6fc:	bc 8d       	ldd	r27, Y+28	; 0x1c
 6fe:	ba 87       	std	Y+10, r27	; 0x0a
 700:	a9 87       	std	Y+9, r26	; 0x09

00000702 <.Loc.138>:
		while(__ticks)
 702:	10 c0       	rjmp	.+32     	; 0x724 <.L31>

00000704 <.L32>:
 704:	80 e9       	ldi	r24, 0x90	; 144
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	9c 87       	std	Y+12, r25	; 0x0c
 70a:	8b 87       	std	Y+11, r24	; 0x0b

0000070c <.LBB14>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 70c:	8b 85       	ldd	r24, Y+11	; 0x0b
 70e:	9c 85       	ldd	r25, Y+12	; 0x0c

00000710 <.L1^B1>:
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <.L1^B1>
 714:	9c 87       	std	Y+12, r25	; 0x0c
 716:	8b 87       	std	Y+11, r24	; 0x0b

00000718 <.Loc.140>:
	...

0000071a <.LBE14>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 71a:	89 85       	ldd	r24, Y+9	; 0x09
 71c:	9a 85       	ldd	r25, Y+10	; 0x0a
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	9a 87       	std	Y+10, r25	; 0x0a
 722:	89 87       	std	Y+9, r24	; 0x09

00000724 <.L31>:
		while(__ticks)
 724:	89 85       	ldd	r24, Y+9	; 0x09
 726:	9a 85       	ldd	r25, Y+10	; 0x0a
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	61 f7       	brne	.-40     	; 0x704 <.L32>

0000072c <.Loc.143>:
		}
		return;
 72c:	19 c0       	rjmp	.+50     	; 0x760 <.L33>

0000072e <.L37>:
	}
	else
		__ticks = (uint16_t)__tmp;
 72e:	6d 81       	ldd	r22, Y+5	; 0x05
 730:	7e 81       	ldd	r23, Y+6	; 0x06
 732:	8f 81       	ldd	r24, Y+7	; 0x07
 734:	98 85       	ldd	r25, Y+8	; 0x08
 736:	0e 94 02 05 	call	0xa04	; 0xa04 <__fixunssfsi>
 73a:	6f 8f       	std	Y+31, r22	; 0x1f
 73c:	78 a3       	std	Y+32, r23	; 0x20
 73e:	89 a3       	std	Y+33, r24	; 0x21
 740:	9a a3       	std	Y+34, r25	; 0x22
 742:	8f 8d       	ldd	r24, Y+31	; 0x1f
 744:	98 a1       	ldd	r25, Y+32	; 0x20
 746:	9a 87       	std	Y+10, r25	; 0x0a
 748:	89 87       	std	Y+9, r24	; 0x09

0000074a <.L28>:
 74a:	89 85       	ldd	r24, Y+9	; 0x09
 74c:	9a 85       	ldd	r25, Y+10	; 0x0a
 74e:	9e 87       	std	Y+14, r25	; 0x0e
 750:	8d 87       	std	Y+13, r24	; 0x0d

00000752 <.LBB16>:
 752:	8d 85       	ldd	r24, Y+13	; 0x0d
 754:	9e 85       	ldd	r25, Y+14	; 0x0e

00000756 <.L1^B2>:
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <.L1^B2>
 75a:	9e 87       	std	Y+14, r25	; 0x0e
 75c:	8d 87       	std	Y+13, r24	; 0x0d

0000075e <.Loc.146>:
	...

00000760 <.L33>:
    _delay_ms(4000);
    state = 2;
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 768:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

0000076c <.Loc.148>:
}
 76c:	00 00       	nop
 76e:	a2 96       	adiw	r28, 0x22	; 34
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <plantsensoraan>:

void plantsensoraan()
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62

00000788 <.Loc.150>:
    //sensoren aan
}
 788:	00 00       	nop
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	08 95       	ret

00000790 <rem>:

void rem()
{
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62

00000798 <.Loc.152>:
    h_bridge_set_percentage(0);
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	0e 94 96 01 	call	0x32c	; 0x32c <h_bridge_set_percentage>

0000079e <.Loc.153>:
}
 79e:	00 00       	nop
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <alarm>:

void alarm()
{
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	cd b7       	in	r28, 0x3d	; 61
 7ac:	de b7       	in	r29, 0x3e	; 62

000007ae <.Loc.155>:
    //1 pinnetje aan en uit schakelen voor 2x
}
 7ae:	00 00       	nop
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <stuurlinks>:

void stuurlinks()
{
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62

000007be <.Loc.157>:
        servo1_set_percentage(-50);
 7be:	8e ec       	ldi	r24, 0xCE	; 206
 7c0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <servo1_set_percentage>

000007c4 <.Loc.158>:
}
 7c4:	00 00       	nop
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <stuurrechts>:

void stuurrechts()
{
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62

000007d4 <.Loc.160>:
   servo1_set_percentage(50);
 7d4:	82 e3       	ldi	r24, 0x32	; 50
 7d6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <servo1_set_percentage>

000007da <.Loc.161>:
}
 7da:	00 00       	nop
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <stuurvooruit>:

void stuurvooruit()
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62

000007ea <.Loc.163>:
    servo1_set_percentage(0);
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0e 94 74 02 	call	0x4e8	; 0x4e8 <servo1_set_percentage>

000007f0 <.Loc.164>:
}
 7f0:	00 00       	nop
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <main>:


int main(void)
{
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62

00000800 <.Loc.166>:
    init_h_bridge();    //d12,13
 800:	0e 94 53 01 	call	0x2a6	; 0x2a6 <init_h_bridge>

00000804 <.Loc.167>:
    init_servo();       //d11
 804:	0e 94 4a 02 	call	0x494	; 0x494 <init_servo>

00000808 <.Loc.168>:
    init();
 808:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <init>

0000080c <.L54>:
    while(1)

    {
        //sensoren checken
        if (PINB & ((1<<PB0) & (1<<PB2)))
 80c:	83 e2       	ldi	r24, 0x23	; 35
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	fc 01       	movw	r30, r24
 812:	80 81       	ld	r24, Z

00000814 <.Loc.170>:
        {
        state = 1;
        }
        if ((PINB & (1<<PB0))==0)
 814:	83 e2       	ldi	r24, 0x23	; 35
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	fc 01       	movw	r30, r24
 81a:	80 81       	ld	r24, Z

0000081c <.Loc.171>:
 81c:	88 2f       	mov	r24, r24
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	81 70       	andi	r24, 0x01	; 1
 822:	99 27       	eor	r25, r25

00000824 <.Loc.172>:
 824:	00 97       	sbiw	r24, 0x00	; 0
 826:	31 f4       	brne	.+12     	; 0x834 <.L45>

00000828 <.Loc.173>:
        {
            state = 5;
 828:	85 e0       	ldi	r24, 0x05	; 5
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 830:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000834 <.L45>:
        }
        if ((PINB & (1<<PB2))==0)
 834:	83 e2       	ldi	r24, 0x23	; 35
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	fc 01       	movw	r30, r24
 83a:	80 81       	ld	r24, Z

0000083c <.Loc.175>:
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	84 70       	andi	r24, 0x04	; 4
 842:	99 27       	eor	r25, r25

00000844 <.Loc.176>:
 844:	00 97       	sbiw	r24, 0x00	; 0
 846:	31 f4       	brne	.+12     	; 0x854 <.L46>

00000848 <.Loc.177>:
        {
            state = 4;
 848:	84 e0       	ldi	r24, 0x04	; 4
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 850:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000854 <.L46>:
        }
     /*   if ((PINB & (1<<PB0) | (1<<PB1))==0)
        {
            state
        }*/
        switch(state)
 854:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 858:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	91 05       	cpc	r25, r1
 860:	91 f1       	breq	.+100    	; 0x8c6 <.L47>
 862:	85 30       	cpi	r24, 0x05	; 5
 864:	91 05       	cpc	r25, r1
 866:	09 f0       	breq	.+2      	; 0x86a <L0^A+0x2>

00000868 <L0^A>:
 868:	8c f6       	brge	.-94     	; 0x80c <.L54>
 86a:	84 30       	cpi	r24, 0x04	; 4
 86c:	91 05       	cpc	r25, r1
 86e:	41 f1       	breq	.+80     	; 0x8c0 <.L49>
 870:	84 30       	cpi	r24, 0x04	; 4
 872:	91 05       	cpc	r25, r1
 874:	09 f0       	breq	.+2      	; 0x878 <L0^A+0x2>

00000876 <L0^A>:
 876:	54 f6       	brge	.-108    	; 0x80c <.L54>
 878:	83 30       	cpi	r24, 0x03	; 3
 87a:	91 05       	cpc	r25, r1
 87c:	39 f1       	breq	.+78     	; 0x8cc <.L55>
 87e:	83 30       	cpi	r24, 0x03	; 3
 880:	91 05       	cpc	r25, r1
 882:	09 f0       	breq	.+2      	; 0x886 <L0^A+0x2>

00000884 <L0^A>:
 884:	1c f6       	brge	.-122    	; 0x80c <.L54>
 886:	82 30       	cpi	r24, 0x02	; 2
 888:	91 05       	cpc	r25, r1
 88a:	a9 f0       	breq	.+42     	; 0x8b6 <.L51>
 88c:	82 30       	cpi	r24, 0x02	; 2
 88e:	91 05       	cpc	r25, r1
 890:	11 f0       	breq	.+4      	; 0x896 <L0^A+0x2>

00000892 <L0^A>:
 892:	0c f0       	brlt	.+2      	; 0x896 <L0^A+0x2>

00000894 <L0^A>:
 894:	bb cf       	rjmp	.-138    	; 0x80c <.L54>
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	21 f0       	breq	.+8      	; 0x8a2 <.L52>
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	91 05       	cpc	r25, r1
 89e:	21 f0       	breq	.+8      	; 0x8a8 <.L53>
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <.L48>

000008a2 <.L52>:
        {
        case(0):
            rem();
 8a2:	0e 94 c8 03 	call	0x790	; 0x790 <rem>

000008a6 <.Loc.180>:
            break;
 8a6:	13 c0       	rjmp	.+38     	; 0x8ce <.L48>

000008a8 <.L53>:

        case(1):
            vroem();
 8a8:	0e 94 14 03 	call	0x628	; 0x628 <vroem>

000008ac <.Loc.182>:
            plantsensoraan();
 8ac:	0e 94 c0 03 	call	0x780	; 0x780 <plantsensoraan>

000008b0 <.Loc.183>:
            stuurvooruit();
 8b0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <stuurvooruit>

000008b4 <.Loc.184>:
            //zij sensoren en sturen bijhouden
            break;
 8b4:	0c c0       	rjmp	.+24     	; 0x8ce <.L48>

000008b6 <.L51>:

        case(2):
            rem();
 8b6:	0e 94 c8 03 	call	0x790	; 0x790 <rem>

000008ba <.Loc.186>:
            alarm();
 8ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <alarm>

000008be <.Loc.187>:
            //plant detect
            //alarm
            break;
 8be:	07 c0       	rjmp	.+14     	; 0x8ce <.L48>

000008c0 <.L49>:
            //bocht
            //plant sensoren uit
            break;

        case(4):
            stuurlinks();
 8c0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <stuurlinks>

000008c4 <.Loc.189>:
            break;
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <.L48>

000008c6 <.L47>:

        case(5):
            stuurrechts();
 8c6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <stuurrechts>

000008ca <.Loc.191>:
            break;
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <.L48>

000008cc <.L55>:
	...

000008ce <.L48>:
        if (PINB & ((1<<PB0) & (1<<PB2)))
 8ce:	9e cf       	rjmp	.-196    	; 0x80c <.L54>

000008d0 <__divmodhi4>:
 8d0:	97 fb       	bst	r25, 7

000008d2 <.Loc.1>:
 8d2:	07 2e       	mov	r0, r23

000008d4 <.Loc.2>:
 8d4:	16 f4       	brtc	.+4      	; 0x8da <.L^B1>

000008d6 <.Loc.3>:
 8d6:	00 94       	com	r0

000008d8 <.Loc.4>:
 8d8:	07 d0       	rcall	.+14     	; 0x8e8 <__divmodhi4_neg1>

000008da <.L^B1>:
 8da:	77 fd       	sbrc	r23, 7

000008dc <.Loc.6>:
 8dc:	09 d0       	rcall	.+18     	; 0x8f0 <__divmodhi4_neg2>

000008de <.Loc.7>:
 8de:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__udivmodhi4>

000008e2 <.Loc.8>:
 8e2:	07 fc       	sbrc	r0, 7

000008e4 <.Loc.9>:
 8e4:	05 d0       	rcall	.+10     	; 0x8f0 <__divmodhi4_neg2>

000008e6 <.Loc.10>:
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__divmodhi4_exit>

000008e8 <__divmodhi4_neg1>:
 8e8:	90 95       	com	r25

000008ea <.Loc.12>:
 8ea:	81 95       	neg	r24

000008ec <.Loc.13>:
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255

000008ee <.Loc.14>:
 8ee:	08 95       	ret

000008f0 <__divmodhi4_neg2>:
 8f0:	70 95       	com	r23

000008f2 <.Loc.16>:
 8f2:	61 95       	neg	r22

000008f4 <.Loc.17>:
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255

000008f6 <__divmodhi4_exit>:
 8f6:	08 95       	ret

000008f8 <__udivmodhi4>:
 8f8:	aa 1b       	sub	r26, r26

000008fa <.Loc.1>:
 8fa:	bb 1b       	sub	r27, r27

000008fc <.Loc.2>:
 8fc:	51 e1       	ldi	r21, 0x11	; 17

000008fe <.Loc.3>:
 8fe:	07 c0       	rjmp	.+14     	; 0x90e <__udivmodhi4_ep>

00000900 <__udivmodhi4_loop>:
 900:	aa 1f       	adc	r26, r26

00000902 <.Loc.5>:
 902:	bb 1f       	adc	r27, r27

00000904 <.Loc.6>:
 904:	a6 17       	cp	r26, r22

00000906 <.Loc.7>:
 906:	b7 07       	cpc	r27, r23

00000908 <.Loc.8>:
 908:	10 f0       	brcs	.+4      	; 0x90e <__udivmodhi4_ep>

0000090a <.Loc.9>:
 90a:	a6 1b       	sub	r26, r22

0000090c <.Loc.10>:
 90c:	b7 0b       	sbc	r27, r23

0000090e <__udivmodhi4_ep>:
 90e:	88 1f       	adc	r24, r24

00000910 <.Loc.12>:
 910:	99 1f       	adc	r25, r25

00000912 <.Loc.13>:
 912:	5a 95       	dec	r21

00000914 <.Loc.14>:
 914:	a9 f7       	brne	.-22     	; 0x900 <__udivmodhi4_loop>

00000916 <.Loc.15>:
 916:	80 95       	com	r24

00000918 <.Loc.16>:
 918:	90 95       	com	r25

0000091a <.Loc.17>:
 91a:	bc 01       	movw	r22, r24

0000091c <.Loc.18>:
 91c:	cd 01       	movw	r24, r26

0000091e <.Loc.19>:
 91e:	08 95       	ret

00000920 <__subsf3>:
 920:	50 58       	subi	r21, 0x80	; 128

00000922 <__addsf3>:
 922:	bb 27       	eor	r27, r27
 924:	aa 27       	eor	r26, r26
 926:	0e 94 a8 04 	call	0x950	; 0x950 <__addsf3x>
 92a:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_round>

0000092e <.L^B1>:
 92e:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_pscA>
 932:	38 f0       	brcs	.+14     	; 0x942 <.L_nan>
 934:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_pscB>
 938:	20 f0       	brcs	.+8      	; 0x942 <.L_nan>
 93a:	39 f4       	brne	.+14     	; 0x94a <.L_inf>
 93c:	9f 3f       	cpi	r25, 0xFF	; 255
 93e:	19 f4       	brne	.+6      	; 0x946 <.L_infB>
 940:	26 f4       	brtc	.+8      	; 0x94a <.L_inf>

00000942 <.L_nan>:
 942:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_nan>

00000946 <.L_infB>:
 946:	0e f4       	brtc	.+2      	; 0x94a <.L_inf>
 948:	e0 95       	com	r30

0000094a <.L_inf>:
 94a:	e7 fb       	bst	r30, 7
 94c:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_inf>

00000950 <__addsf3x>:
 950:	e9 2f       	mov	r30, r25
 952:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_split3>
 956:	58 f3       	brcs	.-42     	; 0x92e <.L^B1>
 958:	ba 17       	cp	r27, r26
 95a:	62 07       	cpc	r22, r18
 95c:	73 07       	cpc	r23, r19
 95e:	84 07       	cpc	r24, r20
 960:	95 07       	cpc	r25, r21
 962:	20 f0       	brcs	.+8      	; 0x96c <.L2^B1>
 964:	79 f4       	brne	.+30     	; 0x984 <.L4^B1>
 966:	a6 f5       	brtc	.+104    	; 0x9d0 <.L_add>
 968:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_zero>

0000096c <.L2^B1>:
 96c:	0e f4       	brtc	.+2      	; 0x970 <.L3^B1>
 96e:	e0 95       	com	r30

00000970 <.L3^B1>:
 970:	0b 2e       	mov	r0, r27
 972:	ba 2f       	mov	r27, r26
 974:	a0 2d       	mov	r26, r0
 976:	0b 01       	movw	r0, r22
 978:	b9 01       	movw	r22, r18
 97a:	90 01       	movw	r18, r0
 97c:	0c 01       	movw	r0, r24
 97e:	ca 01       	movw	r24, r20
 980:	a0 01       	movw	r20, r0
 982:	11 24       	eor	r1, r1

00000984 <.L4^B1>:
 984:	ff 27       	eor	r31, r31
 986:	59 1b       	sub	r21, r25

00000988 <.L5^B1>:
 988:	99 f0       	breq	.+38     	; 0x9b0 <.L7^B1>
 98a:	59 3f       	cpi	r21, 0xF9	; 249
 98c:	50 f4       	brcc	.+20     	; 0x9a2 <.L6^B1>
 98e:	50 3e       	cpi	r21, 0xE0	; 224
 990:	68 f1       	brcs	.+90     	; 0x9ec <.L_ret>
 992:	1a 16       	cp	r1, r26
 994:	f0 40       	sbci	r31, 0x00	; 0
 996:	a2 2f       	mov	r26, r18
 998:	23 2f       	mov	r18, r19
 99a:	34 2f       	mov	r19, r20
 99c:	44 27       	eor	r20, r20
 99e:	58 5f       	subi	r21, 0xF8	; 248
 9a0:	f3 cf       	rjmp	.-26     	; 0x988 <.L5^B1>

000009a2 <.L6^B1>:
 9a2:	46 95       	lsr	r20
 9a4:	37 95       	ror	r19
 9a6:	27 95       	ror	r18
 9a8:	a7 95       	ror	r26
 9aa:	f0 40       	sbci	r31, 0x00	; 0
 9ac:	53 95       	inc	r21
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <.L6^B1>

000009b0 <.L7^B1>:
 9b0:	7e f4       	brtc	.+30     	; 0x9d0 <.L_add>
 9b2:	1f 16       	cp	r1, r31
 9b4:	ba 0b       	sbc	r27, r26
 9b6:	62 0b       	sbc	r22, r18
 9b8:	73 0b       	sbc	r23, r19
 9ba:	84 0b       	sbc	r24, r20
 9bc:	ba f0       	brmi	.+46     	; 0x9ec <.L_ret>

000009be <.L8^B1>:
 9be:	91 50       	subi	r25, 0x01	; 1
 9c0:	a1 f0       	breq	.+40     	; 0x9ea <.L9^B1>
 9c2:	ff 0f       	add	r31, r31
 9c4:	bb 1f       	adc	r27, r27
 9c6:	66 1f       	adc	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	c2 f7       	brpl	.-16     	; 0x9be <.L8^B1>
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec <.L_ret>

000009d0 <.L_add>:
 9d0:	ba 0f       	add	r27, r26
 9d2:	62 1f       	adc	r22, r18
 9d4:	73 1f       	adc	r23, r19
 9d6:	84 1f       	adc	r24, r20
 9d8:	48 f4       	brcc	.+18     	; 0x9ec <.L_ret>
 9da:	87 95       	ror	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f7 95       	ror	r31
 9e4:	9e 3f       	cpi	r25, 0xFE	; 254
 9e6:	08 f0       	brcs	.+2      	; 0x9ea <.L9^B1>
 9e8:	b0 cf       	rjmp	.-160    	; 0x94a <.L_inf>

000009ea <.L9^B1>:
 9ea:	93 95       	inc	r25

000009ec <.L_ret>:
 9ec:	88 0f       	add	r24, r24
 9ee:	08 f0       	brcs	.+2      	; 0x9f2 <.L1^B1>
 9f0:	99 27       	eor	r25, r25

000009f2 <.L1^B1>:
 9f2:	ee 0f       	add	r30, r30
 9f4:	97 95       	ror	r25
 9f6:	87 95       	ror	r24
 9f8:	08 95       	ret

000009fa <__cmpsf2>:
 9fa:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_cmp>
 9fe:	08 f4       	brcc	.+2      	; 0xa02 <.L1^B1>
 a00:	81 e0       	ldi	r24, 0x01	; 1

00000a02 <.L1^B1>:
 a02:	08 95       	ret

00000a04 <__fixunssfsi>:
 a04:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fp_splitA>
 a08:	88 f0       	brcs	.+34     	; 0xa2c <.L_err>
 a0a:	9f 57       	subi	r25, 0x7F	; 127
 a0c:	98 f0       	brcs	.+38     	; 0xa34 <.L_zr>
 a0e:	b9 2f       	mov	r27, r25
 a10:	99 27       	eor	r25, r25
 a12:	b7 51       	subi	r27, 0x17	; 23
 a14:	b0 f0       	brcs	.+44     	; 0xa42 <.L4^B1>
 a16:	e1 f0       	breq	.+56     	; 0xa50 <.L_sign>

00000a18 <.L1^B1>:
 a18:	66 0f       	add	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	1a f0       	brmi	.+6      	; 0xa28 <.L2^B1>
 a22:	ba 95       	dec	r27
 a24:	c9 f7       	brne	.-14     	; 0xa18 <.L1^B1>
 a26:	14 c0       	rjmp	.+40     	; 0xa50 <.L_sign>

00000a28 <.L2^B1>:
 a28:	b1 30       	cpi	r27, 0x01	; 1
 a2a:	91 f0       	breq	.+36     	; 0xa50 <.L_sign>

00000a2c <.L_err>:
 a2c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_zero>
 a30:	b1 e0       	ldi	r27, 0x01	; 1
 a32:	08 95       	ret

00000a34 <.L_zr>:
 a34:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_zero>

00000a38 <.L3^B1>:
 a38:	67 2f       	mov	r22, r23
 a3a:	78 2f       	mov	r23, r24
 a3c:	88 27       	eor	r24, r24
 a3e:	b8 5f       	subi	r27, 0xF8	; 248
 a40:	39 f0       	breq	.+14     	; 0xa50 <.L_sign>

00000a42 <.L4^B1>:
 a42:	b9 3f       	cpi	r27, 0xF9	; 249
 a44:	cc f3       	brlt	.-14     	; 0xa38 <.L3^B1>

00000a46 <.L5^B1>:
 a46:	86 95       	lsr	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b3 95       	inc	r27
 a4e:	d9 f7       	brne	.-10     	; 0xa46 <.L5^B1>

00000a50 <.L_sign>:
 a50:	3e f4       	brtc	.+14     	; 0xa60 <.L6^B1>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255

00000a60 <.L6^B1>:
 a60:	08 95       	ret

00000a62 <__floatunsisf>:
 a62:	e8 94       	clt
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <.L1^B1>

00000a66 <__floatsisf>:
 a66:	97 fb       	bst	r25, 7
 a68:	3e f4       	brtc	.+14     	; 0xa78 <.L1^B1>
 a6a:	90 95       	com	r25
 a6c:	80 95       	com	r24
 a6e:	70 95       	com	r23
 a70:	61 95       	neg	r22
 a72:	7f 4f       	sbci	r23, 0xFF	; 255
 a74:	8f 4f       	sbci	r24, 0xFF	; 255
 a76:	9f 4f       	sbci	r25, 0xFF	; 255

00000a78 <.L1^B1>:
 a78:	99 23       	and	r25, r25
 a7a:	a9 f0       	breq	.+42     	; 0xaa6 <.L4^B1>
 a7c:	f9 2f       	mov	r31, r25
 a7e:	96 e9       	ldi	r25, 0x96	; 150
 a80:	bb 27       	eor	r27, r27

00000a82 <.L2^B1>:
 a82:	93 95       	inc	r25
 a84:	f6 95       	lsr	r31
 a86:	87 95       	ror	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b7 95       	ror	r27
 a8e:	f1 11       	cpse	r31, r1
 a90:	f8 cf       	rjmp	.-16     	; 0xa82 <.L2^B1>
 a92:	fa f4       	brpl	.+62     	; 0xad2 <.L_pack>
 a94:	bb 0f       	add	r27, r27
 a96:	11 f4       	brne	.+4      	; 0xa9c <.L3^B1>
 a98:	60 ff       	sbrs	r22, 0
 a9a:	1b c0       	rjmp	.+54     	; 0xad2 <.L_pack>

00000a9c <.L3^B1>:
 a9c:	6f 5f       	subi	r22, 0xFF	; 255
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	16 c0       	rjmp	.+44     	; 0xad2 <.L_pack>

00000aa6 <.L4^B1>:
 aa6:	88 23       	and	r24, r24
 aa8:	11 f0       	breq	.+4      	; 0xaae <.L5^B1>
 aaa:	96 e9       	ldi	r25, 0x96	; 150
 aac:	11 c0       	rjmp	.+34     	; 0xad0 <.L8^B1>

00000aae <.L5^B1>:
 aae:	77 23       	and	r23, r23
 ab0:	21 f0       	breq	.+8      	; 0xaba <.L6^B1>
 ab2:	9e e8       	ldi	r25, 0x8E	; 142
 ab4:	87 2f       	mov	r24, r23
 ab6:	76 2f       	mov	r23, r22
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <.L7^B1>

00000aba <.L6^B1>:
 aba:	66 23       	and	r22, r22
 abc:	71 f0       	breq	.+28     	; 0xada <.L9^B1>
 abe:	96 e8       	ldi	r25, 0x86	; 134
 ac0:	86 2f       	mov	r24, r22
 ac2:	70 e0       	ldi	r23, 0x00	; 0

00000ac4 <.L7^B1>:
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	2a f0       	brmi	.+10     	; 0xad2 <.L_pack>

00000ac8 <.L10^B1>:
 ac8:	9a 95       	dec	r25
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24

00000ad0 <.L8^B1>:
 ad0:	da f7       	brpl	.-10     	; 0xac8 <.L10^B1>

00000ad2 <.L_pack>:
 ad2:	88 0f       	add	r24, r24
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7

00000ada <.L9^B1>:
 ada:	08 95       	ret

00000adc <__fp_cmp>:
 adc:	99 0f       	add	r25, r25
 ade:	00 08       	sbc	r0, r0
 ae0:	55 0f       	add	r21, r21
 ae2:	aa 0b       	sbc	r26, r26
 ae4:	e0 e8       	ldi	r30, 0x80	; 128
 ae6:	fe ef       	ldi	r31, 0xFE	; 254
 ae8:	16 16       	cp	r1, r22
 aea:	17 06       	cpc	r1, r23
 aec:	e8 07       	cpc	r30, r24
 aee:	f9 07       	cpc	r31, r25
 af0:	c0 f0       	brcs	.+48     	; 0xb22 <.L9^B1>
 af2:	12 16       	cp	r1, r18
 af4:	13 06       	cpc	r1, r19
 af6:	e4 07       	cpc	r30, r20
 af8:	f5 07       	cpc	r31, r21
 afa:	98 f0       	brcs	.+38     	; 0xb22 <.L9^B1>
 afc:	62 1b       	sub	r22, r18
 afe:	73 0b       	sbc	r23, r19
 b00:	84 0b       	sbc	r24, r20
 b02:	95 0b       	sbc	r25, r21
 b04:	39 f4       	brne	.+14     	; 0xb14 <.L1^B1>
 b06:	0a 26       	eor	r0, r26
 b08:	61 f0       	breq	.+24     	; 0xb22 <.L9^B1>
 b0a:	23 2b       	or	r18, r19
 b0c:	24 2b       	or	r18, r20
 b0e:	25 2b       	or	r18, r21
 b10:	21 f4       	brne	.+8      	; 0xb1a <.L2^B1>
 b12:	08 95       	ret

00000b14 <.L1^B1>:
 b14:	0a 26       	eor	r0, r26
 b16:	09 f4       	brne	.+2      	; 0xb1a <.L2^B1>
 b18:	a1 40       	sbci	r26, 0x01	; 1

00000b1a <.L2^B1>:
 b1a:	a6 95       	lsr	r26
 b1c:	8f ef       	ldi	r24, 0xFF	; 255
 b1e:	81 1d       	adc	r24, r1
 b20:	81 1d       	adc	r24, r1

00000b22 <.L9^B1>:
 b22:	08 95       	ret

00000b24 <__fp_inf>:
 b24:	97 f9       	bld	r25, 7
 b26:	9f 67       	ori	r25, 0x7F	; 127
 b28:	80 e8       	ldi	r24, 0x80	; 128
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	60 e0       	ldi	r22, 0x00	; 0
 b2e:	08 95       	ret

00000b30 <__fp_nan>:
 b30:	9f ef       	ldi	r25, 0xFF	; 255
 b32:	80 ec       	ldi	r24, 0xC0	; 192
 b34:	08 95       	ret

00000b36 <__fp_pscA>:
 b36:	00 24       	eor	r0, r0
 b38:	0a 94       	dec	r0
 b3a:	16 16       	cp	r1, r22
 b3c:	17 06       	cpc	r1, r23
 b3e:	18 06       	cpc	r1, r24
 b40:	09 06       	cpc	r0, r25
 b42:	08 95       	ret

00000b44 <__fp_pscB>:
 b44:	00 24       	eor	r0, r0
 b46:	0a 94       	dec	r0
 b48:	12 16       	cp	r1, r18
 b4a:	13 06       	cpc	r1, r19
 b4c:	14 06       	cpc	r1, r20
 b4e:	05 06       	cpc	r0, r21
 b50:	08 95       	ret

00000b52 <__fp_round>:
 b52:	09 2e       	mov	r0, r25
 b54:	03 94       	inc	r0
 b56:	00 0c       	add	r0, r0
 b58:	11 f4       	brne	.+4      	; 0xb5e <.L1^B1>
 b5a:	88 23       	and	r24, r24
 b5c:	52 f0       	brmi	.+20     	; 0xb72 <.L3^B1>

00000b5e <.L1^B1>:
 b5e:	bb 0f       	add	r27, r27
 b60:	40 f4       	brcc	.+16     	; 0xb72 <.L3^B1>
 b62:	bf 2b       	or	r27, r31
 b64:	11 f4       	brne	.+4      	; 0xb6a <.L2^B1>
 b66:	60 ff       	sbrs	r22, 0
 b68:	04 c0       	rjmp	.+8      	; 0xb72 <.L3^B1>

00000b6a <.L2^B1>:
 b6a:	6f 5f       	subi	r22, 0xFF	; 255
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255

00000b72 <.L3^B1>:
 b72:	08 95       	ret

00000b74 <__fp_split3>:
 b74:	57 fd       	sbrc	r21, 7
 b76:	90 58       	subi	r25, 0x80	; 128
 b78:	44 0f       	add	r20, r20
 b7a:	55 1f       	adc	r21, r21
 b7c:	59 f0       	breq	.+22     	; 0xb94 <.L4^B1>
 b7e:	5f 3f       	cpi	r21, 0xFF	; 255
 b80:	71 f0       	breq	.+28     	; 0xb9e <.L5^B1>

00000b82 <.L1^B1>:
 b82:	47 95       	ror	r20

00000b84 <__fp_splitA>:
 b84:	88 0f       	add	r24, r24
 b86:	97 fb       	bst	r25, 7
 b88:	99 1f       	adc	r25, r25
 b8a:	61 f0       	breq	.+24     	; 0xba4 <.L6^B1>
 b8c:	9f 3f       	cpi	r25, 0xFF	; 255
 b8e:	79 f0       	breq	.+30     	; 0xbae <.L7^B1>

00000b90 <.L3^B1>:
 b90:	87 95       	ror	r24
 b92:	08 95       	ret

00000b94 <.L4^B1>:
 b94:	12 16       	cp	r1, r18
 b96:	13 06       	cpc	r1, r19
 b98:	14 06       	cpc	r1, r20
 b9a:	55 1f       	adc	r21, r21
 b9c:	f2 cf       	rjmp	.-28     	; 0xb82 <.L1^B1>

00000b9e <.L5^B1>:
 b9e:	46 95       	lsr	r20
 ba0:	f1 df       	rcall	.-30     	; 0xb84 <__fp_splitA>
 ba2:	08 c0       	rjmp	.+16     	; 0xbb4 <.L8^B1>

00000ba4 <.L6^B1>:
 ba4:	16 16       	cp	r1, r22
 ba6:	17 06       	cpc	r1, r23
 ba8:	18 06       	cpc	r1, r24
 baa:	99 1f       	adc	r25, r25
 bac:	f1 cf       	rjmp	.-30     	; 0xb90 <.L3^B1>

00000bae <.L7^B1>:
 bae:	86 95       	lsr	r24
 bb0:	71 05       	cpc	r23, r1
 bb2:	61 05       	cpc	r22, r1

00000bb4 <.L8^B1>:
 bb4:	08 94       	sec
 bb6:	08 95       	ret

00000bb8 <__fp_zero>:
 bb8:	e8 94       	clt

00000bba <__fp_szero>:
 bba:	bb 27       	eor	r27, r27
 bbc:	66 27       	eor	r22, r22
 bbe:	77 27       	eor	r23, r23
 bc0:	cb 01       	movw	r24, r22
 bc2:	97 f9       	bld	r25, 7
 bc4:	08 95       	ret

00000bc6 <__gesf2>:
 bc6:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_cmp>
 bca:	08 f4       	brcc	.+2      	; 0xbce <.L1^B1>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255

00000bce <.L1^B1>:
 bce:	08 95       	ret

00000bd0 <__mulsf3>:
 bd0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__mulsf3x>
 bd4:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_round>

00000bd8 <.L^B1>:
 bd8:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_pscA>
 bdc:	38 f0       	brcs	.+14     	; 0xbec <.L1^B1>
 bde:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_pscB>
 be2:	20 f0       	brcs	.+8      	; 0xbec <.L1^B1>
 be4:	95 23       	and	r25, r21
 be6:	11 f0       	breq	.+4      	; 0xbec <.L1^B1>
 be8:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_inf>

00000bec <.L1^B1>:
 bec:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_nan>

00000bf0 <.L2^B1>:
 bf0:	11 24       	eor	r1, r1
 bf2:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_szero>

00000bf6 <__mulsf3x>:
 bf6:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_split3>
 bfa:	70 f3       	brcs	.-36     	; 0xbd8 <.L^B1>

00000bfc <__mulsf3_pse>:
 bfc:	95 9f       	mul	r25, r21
 bfe:	c1 f3       	breq	.-16     	; 0xbf0 <.L2^B1>
 c00:	95 0f       	add	r25, r21
 c02:	50 e0       	ldi	r21, 0x00	; 0
 c04:	55 1f       	adc	r21, r21
 c06:	62 9f       	mul	r22, r18
 c08:	f0 01       	movw	r30, r0
 c0a:	72 9f       	mul	r23, r18
 c0c:	bb 27       	eor	r27, r27
 c0e:	f0 0d       	add	r31, r0
 c10:	b1 1d       	adc	r27, r1
 c12:	63 9f       	mul	r22, r19
 c14:	aa 27       	eor	r26, r26
 c16:	f0 0d       	add	r31, r0
 c18:	b1 1d       	adc	r27, r1
 c1a:	aa 1f       	adc	r26, r26
 c1c:	64 9f       	mul	r22, r20
 c1e:	66 27       	eor	r22, r22
 c20:	b0 0d       	add	r27, r0
 c22:	a1 1d       	adc	r26, r1
 c24:	66 1f       	adc	r22, r22
 c26:	82 9f       	mul	r24, r18
 c28:	22 27       	eor	r18, r18
 c2a:	b0 0d       	add	r27, r0
 c2c:	a1 1d       	adc	r26, r1
 c2e:	62 1f       	adc	r22, r18
 c30:	73 9f       	mul	r23, r19
 c32:	b0 0d       	add	r27, r0
 c34:	a1 1d       	adc	r26, r1
 c36:	62 1f       	adc	r22, r18
 c38:	83 9f       	mul	r24, r19
 c3a:	a0 0d       	add	r26, r0
 c3c:	61 1d       	adc	r22, r1
 c3e:	22 1f       	adc	r18, r18
 c40:	74 9f       	mul	r23, r20
 c42:	33 27       	eor	r19, r19
 c44:	a0 0d       	add	r26, r0
 c46:	61 1d       	adc	r22, r1
 c48:	23 1f       	adc	r18, r19
 c4a:	84 9f       	mul	r24, r20
 c4c:	60 0d       	add	r22, r0
 c4e:	21 1d       	adc	r18, r1
 c50:	82 2f       	mov	r24, r18
 c52:	76 2f       	mov	r23, r22
 c54:	6a 2f       	mov	r22, r26
 c56:	11 24       	eor	r1, r1
 c58:	9f 57       	subi	r25, 0x7F	; 127
 c5a:	50 40       	sbci	r21, 0x00	; 0
 c5c:	9a f0       	brmi	.+38     	; 0xc84 <.L13^B1>
 c5e:	f1 f0       	breq	.+60     	; 0xc9c <.L15^B1>

00000c60 <.L10^B1>:
 c60:	88 23       	and	r24, r24
 c62:	4a f0       	brmi	.+18     	; 0xc76 <.L11^B1>
 c64:	ee 0f       	add	r30, r30
 c66:	ff 1f       	adc	r31, r31
 c68:	bb 1f       	adc	r27, r27
 c6a:	66 1f       	adc	r22, r22
 c6c:	77 1f       	adc	r23, r23
 c6e:	88 1f       	adc	r24, r24
 c70:	91 50       	subi	r25, 0x01	; 1
 c72:	50 40       	sbci	r21, 0x00	; 0
 c74:	a9 f7       	brne	.-22     	; 0xc60 <.L10^B1>

00000c76 <.L11^B1>:
 c76:	9e 3f       	cpi	r25, 0xFE	; 254
 c78:	51 05       	cpc	r21, r1
 c7a:	80 f0       	brcs	.+32     	; 0xc9c <.L15^B1>
 c7c:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_inf>

00000c80 <.L12^B1>:
 c80:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_szero>

00000c84 <.L13^B1>:
 c84:	5f 3f       	cpi	r21, 0xFF	; 255
 c86:	e4 f3       	brlt	.-8      	; 0xc80 <.L12^B1>
 c88:	98 3e       	cpi	r25, 0xE8	; 232
 c8a:	d4 f3       	brlt	.-12     	; 0xc80 <.L12^B1>

00000c8c <.L14^B1>:
 c8c:	86 95       	lsr	r24
 c8e:	77 95       	ror	r23
 c90:	67 95       	ror	r22
 c92:	b7 95       	ror	r27
 c94:	f7 95       	ror	r31
 c96:	e7 95       	ror	r30
 c98:	9f 5f       	subi	r25, 0xFF	; 255
 c9a:	c1 f7       	brne	.-16     	; 0xc8c <.L14^B1>

00000c9c <.L15^B1>:
 c9c:	fe 2b       	or	r31, r30
 c9e:	88 0f       	add	r24, r24
 ca0:	91 1d       	adc	r25, r1
 ca2:	96 95       	lsr	r25
 ca4:	87 95       	ror	r24
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
